demo
install.packages("plyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("readr")
library(dplyr)
library(plyr)
library(readr)
library(ggplot2)
library(ggvis)
install.packages("ggvis")
library(ggvis)
source('~/Documents/R Files/mylibrary.R')
mylibrary()
mylibraries()
source('~/Documents/R Files/mylibrary.R')
source('~/Documents/R Files/mylibrary.R')
source('~/Documents/R Files/mylibrary.R')
?sample
??separate
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("png")
getwd()
?servr
?servr
library("servr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?servr
??servr
?servr
?servr
?servr::
?servr
library(servr)
servr
help(servr)
help(??servr)
httd()
httd("/Users/pauloldham17inch/poldham.github.io/_posts")
jekyll("/Users/pauloldham17inch/poldham.github.io", input = c("/Users/pauloldham17inch/poldham.github.io", "_source", "_posts"), output = c("/Users/pauloldham17inch/poldham.github.io", "_posts", "_posts"), script = c("Makefile", "build.R"), serve = TRUE, command = "jekyll build", ...)
jekyll("/Users/pauloldham17inch/poldham.github.io", input = c("/Users/pauloldham17inch/poldham.github.io", "_source", "_posts"), output = c("/Users/pauloldham17inch/poldham.github.io", "_posts", "_posts"), script = c("Makefile", "build.R"), serve = TRUE, command = "jekyll build")
```
jekyll_build()
install.packages("stringi")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "codetools", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "plyr", "Rcpp", "stringr"))
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
install.packages("base64enc")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
key <- 'BiaLwkHwuus8WjXQPdvVajGGrLMkZnf9' ##your consumer key (do not share)
sec_key <- 'wkvTOQeuLwUGYxcw' ## your secret key (do not share)
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
library("base64enc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
auth_enc <- base64encode(charToRaw(paste0(key, ':', sec_key))) ## converts key and secret to base 64 string
heads <- c(auth_enc, 'application/x-www-form-urlencoded')
names(heads) <- c('Authorization', 'content-type')
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
auth <- POST(url = 'https://ops.epo.org/3.1/auth/accesstoken', add_headers(heads), body = 'grant_type=client_credentials') ##requests authorization and client credentials from OPS
source('~/poldham.github.io/Myjekyllsite.R')
setwd("~/poldham.github.io")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-5-2-openrefine-patent-cleaning.Rmd")
KnitPost("2015-05-25-patentscope.Rmd")
KnitPost("2015-05-25-patentscope.Rmd")
